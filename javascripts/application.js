// Generated by CoffeeScript 1.3.3
(function() {
  var desired, geocode, jump, parseResults, query, results;

  $(function() {
    return geocode('10001');
  });

  desired = [76, 105, 110, 107, 101, 100, 76, 105, 115, 116, 78, 89, 67];

  results = [];

  geocode = function(address) {
    return $.ajax({
      url: "./geocode_request.php?address=" + address,
      type: 'GET',
      success: function(data) {
        var coords, lat, lng, location;
        location = JSON.parse(data).results[0].geometry.location;
        lat = location.lat;
        lng = location.lng;
        coords = "" + lat + "," + lng;
        return query(coords);
      }
    });
  };

  jump = function(coords) {
    return $.ajax({
      url: "./geocode_request.php?address=" + coords,
      type: 'GET',
      success: function(data) {
        var height, index, matrix, multiplier, new_lat, new_lng, request_results, viewport, width;
        request_results = JSON.parse(data).results[0];
        viewport = request_results.geometry.viewport;
        width = viewport.northeast.lng - viewport.southwest.lng;
        height = viewport.northeast.lat - viewport.southwest.lat;
        matrix = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];
        index = Math.floor(Math.random() * matrix.length);
        multiplier = 7;
        new_lat = request_results.geometry.location.lat + matrix[index][1] * height * multiplier;
        new_lng = request_results.geometry.location.lng + matrix[index][0] * width * multiplier;
        return query("" + new_lat + "," + new_lng);
      }
    });
  };

  query = function(coords, radius, next_page) {
    var data;
    if (radius == null) {
      radius = 20000;
    }
    if (next_page == null) {
      next_page = false;
    }
    console.log("starting a " + (next_page != null ? 'next page ' : void 0) + "query within " + radius + "m of '" + coords + "'");
    if (next_page) {
      data = {
        next_page: next_page
      };
    } else {
      data = {
        location: coords,
        radius: radius,
        types: 'food',
        name: 'coffee'
      };
    }
    return $.ajax({
      type: 'GET',
      url: "./request.php",
      data: data,
      success: function(data) {
        var addresses, request_results, response;
        response = JSON.parse(data);
        request_results = response.results;
        console.log(response);
        addresses = _.map(request_results, function(result) {
          var _ref;
          return (_ref = result.vicinity.match(/^\d+/)) != null ? _ref[0] : void 0;
        });
        if (addresses.length > 0) {
          console.log("we found some addresses to search! " + (_.compact(addresses)));
          parseResults(request_results);
          if (response.next_page_token != null) {
            console.log('waiting 3s for the next page token to become valid');
            return _.delay(function() {
              return query(coords, radius, response.next_page_token);
            }, 3000);
          } else {
            console.log("looks like we're out of pages, so let's jump to an adjacent area");
            return jump(coords);
          }
        } else {
          console.log("no addresses found in this search, so let's jump to an adjacent area");
          return jump(coords);
        }
      }
    });
  };

  parseResults = function(request_results) {
    results = _.union(results, _.filter(request_results, function(result) {
      var _ref;
      return _.contains(desired, parseInt((_ref = result.vicinity.match(/^\d+/)) != null ? _ref[0] : void 0));
    }));
    _.each(request_results, function(result) {
      return desired = _.reject(desired, function(num) {
        var _ref;
        return num === parseInt((_ref = result.vicinity.match(/^\d+/)) != null ? _ref[0] : void 0);
      });
    });
    console.log("current results:", results);
    console.log("but we're still looking for " + desired);
    if (desired.length === 0) {
      console.log('oh shit, we found them all!');
      return false;
    }
  };

}).call(this);
